clear all;

tolerance = 1e-10; %this value is considered zero
noise_factor = 0.01; %the larger, the far the receiving current target is from the reference
n_instances = 1;
max_iterations = 100;

failures = 0;

for k = 1:n_instances
    %number of elements
    nt = randi(5);
    nr = randi(5);

    %generate an impedance matrix
    timeLine = randomTimeLine(nt,nr,1,zeros(nr,1),rand,rand);

    %load resistance up to 10
    RL = diag([zeros(nt,1);10*rand(nr,1)]);

    %final impedance matrix
    Z = timeLine.Z+RL;

    %TX voltages (up to 20V)
    v = 20*rand(nt,1);

    %corresponding current
    i = Z\[v;zeros(nr,1)];

    %current sub-vectors
    it = i(1:nt);
    ir = i(nt+1:end);

    %active power limit (1x to 2x the power dissipated by employing v)
    P = (v.'*real(it))*(1+rand) + tolerance;

    %transmitting current limits (1x to 2x the current generated by v)
    It = abs(it)*(1+rand);

    %the target
    Ir = abs(ir) + noise_factor*mean(abs(ir))*(rand(nr,1)-0.5);

    dv = fine_adjustment(Z, v, it, ir, It, Ir, P, tolerance/2, max_iterations);

    if isempty(dv)
        failures = failures + 1;
    else
        if max(abs(imag(dv)))>tolerance
            error('dv is not real');
        end

        new_i = Z\[(v+dv);zeros(nr,1)];
        new_it = new_i(1:nt);
        new_ir = new_i(nt+1:end);

        if (v+dv).'*real(new_it) - P > tolerance
            error('too large active power');
        end

        if max(abs(new_it)-It)>tolerance
            error('too large TX current');
        end

        if max(abs(abs(new_ir)-Ir))>tolerance
            error('new_ir too far from the target');
        end
    end
end

disp(['Failures: ', num2str(100*failures/n_instances), '%']);
