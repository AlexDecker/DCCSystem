clear all;

tolerance = 1e-6; %this value is considered zero
noise_factor = 0.01; %the larger, the far the receiving current target is from the reference
n_instances = 1000;
max_iterations = 10;

failures = 0;

for k = 1:n_instances
    %number of elements
    nt = 1;%randi(3);
    nr = 1;%randi(3);
	disp(['Starting with ',num2str(nt), ' transmitters and ',...
		num2str(nr),' receivers']);

    %generate an impedance matrix
    timeLine = randomTimeLine(nt,nr,1,zeros(nr,1),rand,rand);

    %load resistance up to 10
    RL = diag([zeros(nt,1);10*rand(nr,1)]);

    %final impedance matrix
    Z = timeLine.Z+RL;
	
	disp('Final impedance matrix:')
	disp(Z);

    %TX voltages (up to 10V)
    v = 20*(rand(nt,1)-0.5);
	disp(['voltages: ', sprintf('%f | ', v)]);

    %corresponding current
    i = Z\[v;zeros(nr,1)];
	disp(['currents: ', sprintf('%f | ', i)]);

    %current sub-vectors
    it = i(1:nt);
    ir = i(nt+1:end);

    %active power limit (1x to 2x the power dissipated by employing v)
    P = (v.'*real(it))*(1+rand) + tolerance;
	disp(['power limit: ', num2str(P)]);

    %transmitting current limits (1x to 2x the current generated by v)
    It = abs(it)*(1+rand);
	disp(['tx currents limit: ', sprintf('%f | ', It)]);

    %the target
    Ir = abs(ir) + noise_factor*mean(abs(ir))*(rand(nr,1)-0.5);
	disp(['rx target: ', sprintf('%f | ', Ir)]);

    dv = fine_adjustment(Z, v, it, ir, It-tolerance, Ir, P-tolerance, tolerance, max_iterations);

    if isempty(dv)
        failures = failures + 1;
    else
        if max(abs(imag(dv)))>tolerance
            error('dv is not real');
        end

        new_i = Z\[(v+dv);zeros(nr,1)];
        new_it = new_i(1:nt);
        new_ir = new_i(nt+1:end);

        if (v+dv).'*real(new_it) - P > tolerance
            error('too large active power');
        end

        if max(abs(new_it)-It)>tolerance
            error('too large TX current');
        end

        if max(abs(abs(new_ir)-Ir))>tolerance
            error('new_ir too far from the target');
        end
    end
end

disp(['Failures: ', num2str(100*failures/n_instances), '%']);
