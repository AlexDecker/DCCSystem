clear all;

tolerance = 1e-9; %this value is considered zero

n_instances = 1000;

max_iterations = 10;

failures = [];

for noise_factor = linspace(0,0.1,30)
	disp(['Starting noise_factor = ', num2str(noise_factor)]);
	failures(end+1) = 0;

	for k = 1:n_instances

		%number of elements
		nt = randi(3);
		nr = randi(3);
		%disp(['Starting with ',num2str(nt), ' transmitters and ',...
		%	num2str(nr),' receivers']);

		%generate an impedance matrix
		timeLine = randomTimeLine(nt,nr,1,zeros(nr,1),rand,rand);

		%load resistance up to 10
		RL = diag([zeros(nt,1);10*rand(nr,1)]);

		%final impedance matrix
		Z = timeLine.Z+RL;

		%TX voltages (up to 10V)
		v = 20*(rand(nt,1)-0.5);
		
		%print_vector('v', v, 0);

		%corresponding current
		i = Z\[v;zeros(nr,1)];

		%current sub-vectors
		it = i(1:nt);
		ir = i(nt+1:end);
		
		%new values
		v_new = v + noise_factor*mean(abs(v))*(rand(nt,1)-0.5);
		
		%print_vector('v_new', v_new, 0);
		
		%corresponding current
		i_new = Z\[v_new;zeros(nr,1)];
		it_new = i_new(1:nt);
		ir_new = i_new(nt+1:end);
		
		%active power limit (1x to 2x the power dissipated by employing v_new)
		P = (v_new.'*real(it_new))*(1+rand) + 10*tolerance;

		%transmitting current limits (1x to 2x the current generated by v_new)
		It = abs(it_new)*(1+rand) + 10*tolerance;

		%the target
		Ir = abs(ir_new);

		[dv, ~] = fine_adjustment(Z, v, it, ir, It-10*tolerance, Ir, P-10*tolerance, tolerance, max_iterations);

		if isempty(dv)
			failures(end) = failures(end) + 1;
		else
			if max(abs(imag(dv)))>tolerance
				error('dv is not real');
			end

			new_i = Z\[(v+dv);zeros(nr,1)];
			new_it = new_i(1:nt);
			new_ir = new_i(nt+1:end);

			if (v+dv).'*real(new_it) - P > 0 || max(abs(new_it).^2-It.^2) > 0 || max(abs(abs(new_ir).^2-Ir.^2)) > 2*tolerance
				failures(end) + failures(end) + 1;
			end
		end
	end
end

plot(linspace(0,0.1,30), 100*failures/n_instances);
ylabel('Failure (%)');
xlabel('Noise factor');